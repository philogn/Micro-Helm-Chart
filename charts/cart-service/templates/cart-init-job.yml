apiVersion: batch/v1
kind: Job
metadata:
  name: cart-service-redis-init
  annotations:
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-options: Ignore=true
    argocd.argoproj.io/compare-options: "IgnoreExtraneous"
    argocd.argoproj.io/sync-wave: "-1"
spec:
  backoffLimit: 3  # try 3 times if failed
  ttlSecondsAfterFinished: 3600  # auto delete job after 1 hour
  template:
    spec:
      initContainers:
        - name: wait-for-redis-cart-db
          image: busybox:1.28
          command: ['sh', '-c', 'until nslookup redis-cart.{{ .Values.global.namespace }}.svc.cluster.local; do echo waiting for redis; sleep 2; done;']
      containers:
      - name: redis-init
        image: "{{ .Values.global.privateRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Waiting for Redis to be ready..."
            sleep 5
            echo "Running Redis initialization script..."
            /app/cart-service init-redis
        env:
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: ecommerce-cart-secret
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            secretKeyRef:
              name: ecommerce-cart-secret
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ecommerce-cart-secret
              key: REDIS_PASSWORD
              optional: true
      restartPolicy: OnFailure 
      imagePullSecrets:
        - name: {{ .Values.global.pullSecret }}